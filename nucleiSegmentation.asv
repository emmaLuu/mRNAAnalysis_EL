function embryo = nucleiSegmentation(varargin)
% later change the folder to prefix
% make the final version of the subfunctions scripts

close all
warning('off','all')
% defining variables
folder = [];
sigma = 2;
rMin = 4;
rMax = 10;
show = 0;

if ~isempty(varargin)
    for i = 1:length(varargin)
        if strcmpi(varargin{i},'folder')
            folder = varargin{i+1};
        elseif strcmpi(varargin{i},'sigma')
            sigma = varargin{i+1};
        elseif strcmpi(varargin{i},'radiusRange')
            radiusRange = varargin{i+1};
            rMin = radiusRange(1);
            rMax = radiusRange(2);
        elseif strcmpi(varargin{i},'showCircles')
            show = 1;
        end
    end
end

if isempty(folder) % if the user did not give a folder, ask them for one
    folder = uigetdir('Please select the folder with your data of interest');
end

[~, ~, LIFImages, ~] = loadLIFFile(folder);

% setting figures
% imageFigure = figure(1);
% set(imageFigure,'Position',[9 49 496 635])
% nucleiClass = figure(2);
% set(nucleiClass,'Position',[521 49 496 635])


numberOfSeries = size(LIFImages,1);
for i = 1:numberOfSeries
    numberOfSlices = size(LIFImages,2);
    for j = 1:numberOfSlices
        currentSlice = double(LIFImages{i}{j});
        embryoMask = double(maskEmbryo(currentSlice));
        embryoOnly = embryoMask.*currentSlice;
        
        %         % a gui for a quick glance at the diameter of the nuclei
        %         figure('units','normalized','outerposition',[0 0 1 1])
        %         imshow(currentSlice,[])
        %         d = imdistline; % measuring diameter of circles
        
        %         figure(imageFigure) %--------------------------------
        %         imshow(embryoOnly,[])
        
        % Nuclear classification
        % note: find a way so that it does not classify parts of the edge of the
        % embryo as a nucleus
        nuclei = generateNuclearMask(embryoOnly,rMin,rMax,sigma,show);
        
        if ~isempty(nuclei)
            [nuclei,meanFluo] = computeMeanFluo(nuclei,currentSlice);
        else
            meanFluo = [];
        end
        
        embryo(i).slice(j).nuclei = nuclei;
        embryo(i).slice(j).mean = meanFluo; % the total mean of the slice
        
        %         pause(0.25)
    end
end

warning('on','all')
end


function mask = maskEmbryo(image)
mask = bwareafilt(image>mean(image,'all'),1);

end

function nucleus = generateNuclearMask(image,rMin,rMax,sigma,show)
% This function takes an image and applies a 2D gaussian
% filter to that image. Nuclei are identified and a nuclear mask is
% created for each one is created. A structure with fields "mask","center",
% and "radius" is returned.


% applying 2D gaussian filter
blurredImage = imgaussfilt(image,sigma);
%blurredImage = adapthisteq(blurredImage);

% identifiying nuclei center and radius
% Method 1: imfindCircles with dark object polarity...
% This does not work all the time.
if mean(image,'all') > 15 % find a better threshold...but probably not doing anything...
    [centers,radii] = imfindcircles(blurredImage,[rMin rMax],...
        'ObjectPolarity','dark');
    %     disp('Method 1')
else
    % delete later please
    %     figure()
    %     subplot(2,1,1)
    %     histogram(image)
    %     title('Original')
    %     subplot(2,1,2)
    %     histogram(blurredImage)
    %     title('Blurred')
    
    % method 2: thresholding image
    [counts,binEdges] = histcounts(nonzeros(blurredImage));
    [~,sortedIndex] = sort(counts);
    threshold = binEdges(sortedIndex(end));
    areaFiltered = bwareafilt(blurredImage<=threshold,pi().*[rMin rMax].^2);
    [centers,radii] = imfindcircles(areaFiltered,[rMin rMax],...
            'ObjectPolarity','dark');
        
    if isempty(centers)
        % method 3: edge and imfindcircles
        topTwoIntensities = binEdges(sortedIndex(end-1:end));
        newThreshold = mean(topTwoIntensities);
        edgeFiltered = edge(blurredImage>newThreshold);
        areaFiltered = bwareafilt(edgeFiltered,pi().*[rMin rMax].^2);
        [centers,radii] = imfindcircles(areaFiltered,[rMin rMax],...
            'ObjectPolarity','dark');
        %disp('Method 3')
    else
        %disp('Method 2')
    end
end

% method 3: method 2 plus bwareafilt
% [counts,edges] = histcounts(nonzeros(blurredImage));
% [sortedCounts,sortedIndex] = sort(counts);
% topTwoIntensities = edges(sortedIndex(end-1:end));
% threshold = mean(topTwoIntensities);
% edgeFiltered = edge(blurredImage>threshold);
% BW2 = bwareafilt(edgeFiltered,pi().*[rMin rMax].^2);
% % figure();
% % imshow(BW2,[]);
% [centers,radii] = imfindcircles(BW2,[rMin rMax]);

% plotting given image and an overlay of the nuclei identified
if show && ~isempty(centers)
    figureHandle = figure('Units','normalized','Position',[0 0 1 1]);
    % showing the circles included in the mask
    %     imshow(image,[])
    subplot(1,2,1)
    imshow(blurredImage,[])
    hold on
    viscircles(centers, radii,'Color','b'); % maybe check out why there is an outer white layer
    
%     subplot(1,3,2)
%     histogram(nonzeros(blurredImage));
    subplot(1,2,2)
    [counts,binEdges] = histcounts(nonzeros(blurredImage));
    [~,sortedIndex] = sort(counts);
    threshold = binEdges(sortedIndex(end));
    bw = blurredImage<=threshold;
    
    % method : watershed 
    % remove any small dots in the background before doing this
    % compute the distance transform
    D = -bwdist(~bw);
    %imshow(D,[])
    % create small spots that are roughly in the middle of the cells to be
    % segmented
    mask = imextendedmin(D,2);
    %imshowpair(bw,mask,'blend')
    % modify the distance transform so it only has minima at the desired
    % locations
    D2 = imimposemin(D,mask);
    % compute the watershed transform of D
    Ld2 = watershed(D2);
    % use the ridge lines to segment the binary image by changing the corresponding pixels into background
    bw2 = bw;
    bw2(Ld2 == 0) = 0;
    bwareafilt(edgeFiltered,pi().*[rMin rMax].^2);
    imshow(bw2)
    
%     for t = 1:length(counts)
%         stack = blurredImage<=edges(t);
%         imshow(stack,[])
%         title([num2str(edges(t))])
%         pause(0.005)
%     end
    
    %     surf(blurredImage,'LineStyle','none','FaceColor','interp')
    %     xlim([0 512])
    %     ylim([0 512])
    
    %     mask = zeros(size(blurredImage));
    %     mask(100:end-100,100:end-100) = 1;
    %     bw = activecontour(blurredImage,mask,300);
    %     imshow(bw)
    
    %     histogram(radii)
    %     title('Histogram of Radii')
    
    pause(0.1)
elseif show && isempty(centers)
    disp('No nuclei found')
end

% Creating mask for each nuclei
imageSizeX = size(image,1);
imageSizeY = size(image,2);
[columnsInImage, rowsInImage] = meshgrid(1:imageSizeX, 1:imageSizeY);

for k = 1:size(centers,1)
    singleCircle = drawFilledCircle(columnsInImage,rowsInImage,...
        centers(k,:),radii(k));
    
    % storing the mask, center, and radius of each nucleus
    nucleus(k).mask = singleCircle;
    nucleus(k).center = centers(k,:);
    nucleus(k).radius = radii(k);
end

if isempty(centers)
    nucleus = [];
end

end

function [nucleus,totalMean] = computeMeanFluo(nucleus,image)
% This function takes a struct of the nuclear mask and the original
% interest and created a new field called "average" which will have the
% average of the corresponding nucleus. It will return the total mean of
% the nuclei.

mask = zeros(size(image));

for i = 1:length(nucleus)
    currentNucleus = image.*nucleus(i).mask;
    nucleus(i).average = mean(nonzeros(currentNucleus)); % need to think more carefully about the nonzeros
    mask = mask + nucleus(i).mask;
end

allNucleiFluo = mask.*image;
totalMean = mean(nonzeros(allNucleiFluo)); % nonzeros(allnucleiFluo) is an array
end

function circle = drawFilledCircle(columnsInImage,rowsInImage,center,radius)
% Adds a logical image of a circle with specified
% diameter, center, and image size.
% Next create the circle in the given image.

centerX = center(1);
centerY = center(2);
circle = (rowsInImage - centerY).^2 ...
    + (columnsInImage - centerX).^2 <= radius.^2;
end


